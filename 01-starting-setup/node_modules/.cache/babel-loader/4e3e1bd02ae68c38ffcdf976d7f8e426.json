{"ast":null,"code":"var _jsxFileName = \"/home/hyunjun/\\uC5F0\\uC2B5_git_react_practice/01-starting-setup/src/conponents/NewExpense/ExpenseForm.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState } from 'react';\nimport './ExpenseForm.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst ExpenseForm = () => {\n  _s();\n\n  const [enteredTitle, setEnteredTitle] = useState('Title'); // Title 관련 useState\n\n  const [enteredAmount, setEnteredAmount] = useState('Amount'); // Amount 관련 useState\n\n  const [enteredDate, setEnteredDate] = useState('Date'); // Date 관련 useState\n  // const [userInput, setUserInput]=useState({ // 여러개의 상태를 하나의 상태로 만들어줌.\n  //     enteredTitle: '',\n  //     enteredAmount: '',\n  //     enteredDate: ''\n  // })\n  // Title 상태 변경 함수 ( onChange )\n\n  const titleChangeHandler = event => {\n    setEnteredTitle(event.target.value); // setUserInput({\n    //     ...userInput, // 앞에 내용을 복사하지 않으면 state는 전에 있던 내용을 간직하는게 아니라 현재의 값만 남겨버린다.\n    //     // 그래서 전에 값을 복사하고 변경되는 값만 재할당 해준다.\n    //     enteredTitle:event.target.value,\n    // })\n  }; // Amount 상태 변경 함수 ( onChange )\n\n\n  const amountChangeHandler = event => {\n    setEnteredAmount(event.target.value); // titleChangeHandler 와 다른 방법이 있는데 이 방법을 사용하는 것이 더 좋아보인다. \n    // 그 이유는 객체의 상태로 리액트를 계속 사용하게 되면 이전의 상태에 의존하여(리액트에서 상태는 이전의 상태를 또 불러줘야 없어지지 않는다.)  최신의 상태를 작성할 때 이슈가 생길수도 있다고? 한다.\n    // setUserInput((prevState)=>{ // 이 방법은 리액트를 하면서 자주 보게 될 방법이니 꼭 알아두자! \n    //     return {...prevState, enteredAmount: event.target.value}\n    // })\n  }; // Date 상태 변경 함수 ( onChange )\n\n\n  const dateChangeHandler = event => {\n    setEnteredDate(event.target.value); // setUserInput({\n    //     ...userInput,\n    //     enteredDate:event.target.value,\n    // })\n  };\n\n  const submitHandler = e => {\n    e.preventDefault();\n    const expenseData = {\n      titel: enteredTitle,\n      amount: enteredAmount,\n      date: new Date()\n    };\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"form\", {\n    onSubmit: submitHandler,\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"new-expense__controls\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"new-expense__control\",\n        children: [/*#__PURE__*/_jsxDEV(\"label\", {\n          children: enteredTitle\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 63,\n          columnNumber: 17\n        }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"text\",\n          onChange: titleChangeHandler\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 64,\n          columnNumber: 17\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 62,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"new-expense__control\",\n        children: [/*#__PURE__*/_jsxDEV(\"label\", {\n          children: enteredAmount\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 67,\n          columnNumber: 17\n        }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"number\",\n          min: \"0.01\",\n          step: \"0.01\",\n          onChange: amountChangeHandler\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 68,\n          columnNumber: 17\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 66,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"new-expense__control\",\n        children: [/*#__PURE__*/_jsxDEV(\"label\", {\n          children: enteredDate\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 71,\n          columnNumber: 17\n        }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"Date\",\n          min: \"2022-01-01\",\n          max: \"2023-12-31\",\n          onChange: dateChangeHandler\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 72,\n          columnNumber: 17\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 70,\n        columnNumber: 13\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 61,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"new-expense__actions\",\n      children: /*#__PURE__*/_jsxDEV(\"button\", {\n        type: \"submit\",\n        children: \"Add Expense\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 76,\n        columnNumber: 13\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 75,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 60,\n    columnNumber: 5\n  }, this);\n};\n\n_s(ExpenseForm, \"svG80XY+f9hBZwskA091JpMTr4M=\");\n\n_c = ExpenseForm;\nexport default ExpenseForm;\n\nvar _c;\n\n$RefreshReg$(_c, \"ExpenseForm\");","map":{"version":3,"names":["React","useState","ExpenseForm","enteredTitle","setEnteredTitle","enteredAmount","setEnteredAmount","enteredDate","setEnteredDate","titleChangeHandler","event","target","value","amountChangeHandler","dateChangeHandler","submitHandler","e","preventDefault","expenseData","titel","amount","date","Date"],"sources":["/home/hyunjun/연습_git_react_practice/01-starting-setup/src/conponents/NewExpense/ExpenseForm.js"],"sourcesContent":["import React,{useState} from 'react'\n\nimport './ExpenseForm.css'\n\nconst ExpenseForm = ()=>{\n    const [enteredTitle,setEnteredTitle] = useState('Title')\n// Title 관련 useState\n    const [enteredAmount,setEnteredAmount] = useState('Amount')\n// Amount 관련 useState\n    const [enteredDate,setEnteredDate] = useState('Date')\n// Date 관련 useState\n\n    // const [userInput, setUserInput]=useState({ // 여러개의 상태를 하나의 상태로 만들어줌.\n    //     enteredTitle: '',\n    //     enteredAmount: '',\n    //     enteredDate: ''\n    // })\n\n    // Title 상태 변경 함수 ( onChange )\n    const titleChangeHandler = (event)=>{\n        setEnteredTitle(event.target.value)\n        // setUserInput({\n        //     ...userInput, // 앞에 내용을 복사하지 않으면 state는 전에 있던 내용을 간직하는게 아니라 현재의 값만 남겨버린다.\n        //     // 그래서 전에 값을 복사하고 변경되는 값만 재할당 해준다.\n        //     enteredTitle:event.target.value,\n        // })\n    }\n\n    // Amount 상태 변경 함수 ( onChange )\n    const amountChangeHandler = (event)=>{\n        setEnteredAmount(event.target.value)\n        // titleChangeHandler 와 다른 방법이 있는데 이 방법을 사용하는 것이 더 좋아보인다. \n        // 그 이유는 객체의 상태로 리액트를 계속 사용하게 되면 이전의 상태에 의존하여(리액트에서 상태는 이전의 상태를 또 불러줘야 없어지지 않는다.)  최신의 상태를 작성할 때 이슈가 생길수도 있다고? 한다.\n        // setUserInput((prevState)=>{ // 이 방법은 리액트를 하면서 자주 보게 될 방법이니 꼭 알아두자! \n        //     return {...prevState, enteredAmount: event.target.value}\n        // })\n    }\n\n\n    // Date 상태 변경 함수 ( onChange )\n    const dateChangeHandler = (event)=>{\n        setEnteredDate(event.target.value)\n        // setUserInput({\n        //     ...userInput,\n        //     enteredDate:event.target.value,\n        // })\n    }\n\n    const submitHandler = (e) =>{\n        e.preventDefault()\n\n        const expenseData ={\n            titel: enteredTitle,\n            amount: enteredAmount,\n            date: new Date()\n        }\n    }\n\n    return (\n    <form onSubmit={submitHandler}>\n        <div className='new-expense__controls'>\n            <div className='new-expense__control'>\n                <label>{enteredTitle}</label>\n                <input type=\"text\" onChange={titleChangeHandler}/>\n            </div>\n            <div className='new-expense__control'>\n                <label>{enteredAmount}</label>\n                <input type=\"number\" min=\"0.01\" step=\"0.01\" onChange={amountChangeHandler}/>\n            </div>\n            <div className='new-expense__control'>\n                <label>{enteredDate}</label>\n                <input type=\"Date\" min=\"2022-01-01\" max=\"2023-12-31\" onChange={dateChangeHandler} />\n            </div>\n        </div>\n        <div className='new-expense__actions'>\n            <button type='submit'>Add Expense</button>\n        </div>\n    </form>\n    )\n}\n\nexport default ExpenseForm"],"mappings":";;;AAAA,OAAOA,KAAP,IAAcC,QAAd,QAA6B,OAA7B;AAEA,OAAO,mBAAP;;;AAEA,MAAMC,WAAW,GAAG,MAAI;EAAA;;EACpB,MAAM,CAACC,YAAD,EAAcC,eAAd,IAAiCH,QAAQ,CAAC,OAAD,CAA/C,CADoB,CAExB;;EACI,MAAM,CAACI,aAAD,EAAeC,gBAAf,IAAmCL,QAAQ,CAAC,QAAD,CAAjD,CAHoB,CAIxB;;EACI,MAAM,CAACM,WAAD,EAAaC,cAAb,IAA+BP,QAAQ,CAAC,MAAD,CAA7C,CALoB,CAMxB;EAEI;EACA;EACA;EACA;EACA;EAEA;;EACA,MAAMQ,kBAAkB,GAAIC,KAAD,IAAS;IAChCN,eAAe,CAACM,KAAK,CAACC,MAAN,CAAaC,KAAd,CAAf,CADgC,CAEhC;IACA;IACA;IACA;IACA;EACH,CAPD,CAfoB,CAwBpB;;;EACA,MAAMC,mBAAmB,GAAIH,KAAD,IAAS;IACjCJ,gBAAgB,CAACI,KAAK,CAACC,MAAN,CAAaC,KAAd,CAAhB,CADiC,CAEjC;IACA;IACA;IACA;IACA;EACH,CAPD,CAzBoB,CAmCpB;;;EACA,MAAME,iBAAiB,GAAIJ,KAAD,IAAS;IAC/BF,cAAc,CAACE,KAAK,CAACC,MAAN,CAAaC,KAAd,CAAd,CAD+B,CAE/B;IACA;IACA;IACA;EACH,CAND;;EAQA,MAAMG,aAAa,GAAIC,CAAD,IAAM;IACxBA,CAAC,CAACC,cAAF;IAEA,MAAMC,WAAW,GAAE;MACfC,KAAK,EAAEhB,YADQ;MAEfiB,MAAM,EAAEf,aAFO;MAGfgB,IAAI,EAAE,IAAIC,IAAJ;IAHS,CAAnB;EAKH,CARD;;EAUA,oBACA;IAAM,QAAQ,EAAEP,aAAhB;IAAA,wBACI;MAAK,SAAS,EAAC,uBAAf;MAAA,wBACI;QAAK,SAAS,EAAC,sBAAf;QAAA,wBACI;UAAA,UAAQZ;QAAR;UAAA;UAAA;UAAA;QAAA,QADJ,eAEI;UAAO,IAAI,EAAC,MAAZ;UAAmB,QAAQ,EAAEM;QAA7B;UAAA;UAAA;UAAA;QAAA,QAFJ;MAAA;QAAA;QAAA;QAAA;MAAA,QADJ,eAKI;QAAK,SAAS,EAAC,sBAAf;QAAA,wBACI;UAAA,UAAQJ;QAAR;UAAA;UAAA;UAAA;QAAA,QADJ,eAEI;UAAO,IAAI,EAAC,QAAZ;UAAqB,GAAG,EAAC,MAAzB;UAAgC,IAAI,EAAC,MAArC;UAA4C,QAAQ,EAAEQ;QAAtD;UAAA;UAAA;UAAA;QAAA,QAFJ;MAAA;QAAA;QAAA;QAAA;MAAA,QALJ,eASI;QAAK,SAAS,EAAC,sBAAf;QAAA,wBACI;UAAA,UAAQN;QAAR;UAAA;UAAA;UAAA;QAAA,QADJ,eAEI;UAAO,IAAI,EAAC,MAAZ;UAAmB,GAAG,EAAC,YAAvB;UAAoC,GAAG,EAAC,YAAxC;UAAqD,QAAQ,EAAEO;QAA/D;UAAA;UAAA;UAAA;QAAA,QAFJ;MAAA;QAAA;QAAA;QAAA;MAAA,QATJ;IAAA;MAAA;MAAA;MAAA;IAAA,QADJ,eAeI;MAAK,SAAS,EAAC,sBAAf;MAAA,uBACI;QAAQ,IAAI,EAAC,QAAb;QAAA;MAAA;QAAA;QAAA;QAAA;MAAA;IADJ;MAAA;MAAA;MAAA;IAAA,QAfJ;EAAA;IAAA;IAAA;IAAA;EAAA,QADA;AAqBH,CA3ED;;GAAMZ,W;;KAAAA,W;AA6EN,eAAeA,WAAf"},"metadata":{},"sourceType":"module"}